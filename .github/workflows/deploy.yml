name: Deploy Frontend to EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run tests
      run: npm run test
      env:
        NEXT_PUBLIC_BACKEND_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
        NEXT_PUBLIC_JWT_SECRET: ${{ secrets.NEXT_PUBLIC_JWT_SECRET }}

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/kdl-frontend:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/kdl-frontend:${{ github.sha }}
        build-args: |
          NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
          NEXT_PUBLIC_JWT_SECRET=${{ secrets.NEXT_PUBLIC_JWT_SECRET }}
          NEXT_PUBLIC_AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/kdl-app
          
          # Update frontend environment variables
          cat > frontend.env << EOF
          NODE_ENV=production
          PORT=3000
          NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
          NEXT_PUBLIC_JWT_SECRET=${{ secrets.NEXT_PUBLIC_JWT_SECRET }}
          ANALYZE=false
          NEXT_PUBLIC_FORCE_INSECURE_COOKIES=true
          AWS_REGION=us-east-1
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          NEXT_PUBLIC_AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          EOF
          
          # Stop frontend container
          docker compose stop frontend
          docker compose rm -f frontend
          
          # Remove old image
          docker image rm ${{ secrets.DOCKER_HUB_USERNAME }}/kdl-frontend:latest 2>/dev/null || true
          
          # Pull latest image
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/kdl-frontend:latest
          
          # Start frontend container
          docker compose up -d frontend
          
          # Wait and check health
          sleep 10
          docker compose logs --tail=20 frontend
          
          echo "✅ Frontend deployment completed!"

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "🎉 Frontend deployment successful!"
        else
          echo "❌ Frontend deployment failed!"
          exit 1
        fi